init_path()
{
	local _pkg_found=0

	case "${platform}" in
		DragonFly)
			return 0
			# not for DFLY: https://mirror-master.dragonflybsd.org/dports/bootstraps/bootstrap_pkg_03_x86-64.tar.xz have old pkg, we use pkg-static from the base,
			# thanks to preparebase.
			# Dup for jcreate.subr:postcreate_module_action
			${PKG_PRE} ${MAKE_CMD} -C /usr pkg-bootstrap
			;;
	esac

	for i in /usr/local/sbin/pkg /usr/sbin/pkg /usr/local/sbin/pkg-static /usr/sbin/pkg-static /sbin/pkg /sbin/pkg-static; do
		if [ -x "${path}${i}" ]; then
			_pkg_found=1
			PKG_STATIC_PATH="${i}"
			break
		fi
	done

	[ ${_pkg_found} -eq 0 ] && err 1 "${N1_COLOR}no such 'pkg' or 'pkg-static' here: ${PKG_PRE} which pkg-static pkg (try pkg_bootstrap=0)${N0_COLOR}"

	${ECHO} "${N1_COLOR}First running pkg. Bootstrapping: ${N2_COLOR}${PKG_STATIC_PATH}${N1_COLOR}...${N0_COLOR}"
#	pkg_bootstrap
#	PKGCONF_SKEL="${_MYDIR}/pkg.conf"
}

pkg_info()
{
	local _ret _i

	echo " ${PKG_PRE} ${ENV_CMD} ASSUME_ALWAYS_YES=yes ${PKG_STATIC_PATH} ${PKGARGS} info"

	# retry if failed
	for _i in $( ${JOT_CMD} ${cbsd_pkg_retry} ); do
		${ECHO} "${N1_COLOR}pkg info, attempt: ${N2_COLOR}${_i}/${cbsd_pkg_retry}${N0_COLOR}"
		${TIMEOUT_CMD} 16 ${PKG_PRE} ${ENV_CMD} ASSUME_ALWAYS_YES=yes ${PKG_STATIC_PATH} ${PKGARGS} info ${*}
		_ret=$?
		[ ${_ret} -eq 0 ] && break
	done

	# overwrite errcode if necessary
	[ ${cbsd_pkg_interrupt_on_error} -eq 0 ] && _ret=0

	return ${_ret}
}

pkg_query()
{
	local _ret _i

	# retry if failed
	for _i in $( ${JOT_CMD} ${cbsd_pkg_retry} ); do
		${ECHO} "${N1_COLOR}pkg query, attempt: ${N2_COLOR}${_i}/${cbsd_pkg_retry}${N0_COLOR}"
		${PKG_PRE} ${PKG_STATIC_PATH} ${PKGARGS} query ${*}
		_ret=$?
		[ ${_ret} -eq 0 ] && break
	done

	# overwrite errcode if necessary
	[ ${cbsd_pkg_interrupt_on_error} -eq 0 ] && _ret=0

	return ${_ret}
}


pkg_remove()
{
	local _ret _i

	# retry if failed
	for _i in $( ${JOT_CMD} ${cbsd_pkg_retry} ); do
		${ECHO} "${N1_COLOR}pkg remove, attempt: ${N2_COLOR}${_i}/${cbsd_pkg_retry}${N0_COLOR}"
		${PKG_PRE} ${PKG_STATIC_PATH} ${PKGARGS} remove -y ${*}
		_ret=$?
		[ ${_ret} -eq 0 ] && break
	done

	# overwrite errcode if necessary
	[ ${cbsd_pkg_interrupt_on_error} -eq 0 ] && _ret=0

	return ${_ret}
}

pkg_install()
{
	local _ret _i _attempt=0

	# retry if failed
	for _i in $( ${JOT_CMD} ${cbsd_pkg_retry} ); do
		${ECHO} "${N1_COLOR}pkg install, attempt: ${N2_COLOR}${_i}/${cbsd_pkg_retry}${N0_COLOR}"
		${ENV_CMD} SIGNATURE_TYPE=none ASSUME_ALWAYS_YES=yes IGNORE_OSVERSION=yes ${PKG_PRE} ${PKG_STATIC_PATH} ${PKGARGS} install -g -U -y ${*}
		_ret=$?
		[ ${_ret} -eq 0 ] && break
		if [ ${_attempt} -eq 0 ]; then
			# try to update
			echo "Trying to pkg update.."
			${ENV_CMD} IGNORE_OSVERSION=yes SIGNATURE_TYPE=none ASSUME_ALWAYS_YES=yes ${TIMEOUT_CMD} 60 ${PKG_PRE} ${PKG_STATIC_PATH} ${PKGARGS} update -f ${*}
		fi
		_attempt=$(( _attempt + 1 ))
	done

	# Remove cache in jail
	[ -n "${jname}" -a -d "${path}/var/cache/pkg" ] && ${RM_CMD} -rf ${path}/var/cache/pkg/*

	# overwrite errcode if necessary
	[ ${cbsd_pkg_interrupt_on_error} -eq 0 ] && _ret=0

	return ${_ret}
}


pkg_update()
{
	local _ret _i

	# retry if failed
	for _i in $( ${JOT_CMD} ${cbsd_pkg_retry} ); do
		${ECHO} "${N1_COLOR}pkg update, attempt: ${N2_COLOR}${_i}/${cbsd_pkg_retry}${N0_COLOR}"
		${ENV_CMD} IGNORE_OSVERSION=yes SIGNATURE_TYPE=none ASSUME_ALWAYS_YES=yes ${TIMEOUT_CMD} 60 ${PKG_PRE} ${PKG_STATIC_PATH} ${PKGARGS} update -f ${*}
		_ret=$?
		[ ${_ret} -eq 0 ] && break
	done

	# overwrite errcode if necessary
	[ ${cbsd_pkg_interrupt_on_error} -eq 0 ] && _ret=0

	return ${_ret}
}

pkg_clean()
{
	local _ret _i

	# retry if failed
	for _i in $( ${JOT_CMD} ${cbsd_pkg_retry} ); do
		${ECHO} "${N1_COLOR}pkg clean, attempt: ${N2_COLOR}${_i}/${cbsd_pkg_retry}${N0_COLOR}"
		${PKG_PRE} ${PKG_STATIC_PATH} ${PKGARGS} clean -ya
		_ret=$?
		[ ${_ret} -eq 0 ] && break
	done

	# overwrite errcode if necessary
	[ ${cbsd_pkg_interrupt_on_error} -eq 0 ] && _ret=0

	return ${_ret}
}

pkg_upgrade()
{
	local _ret _i

	# retry if failed
	for _i in $( ${JOT_CMD} ${cbsd_pkg_retry} ); do
		${ECHO} "${N1_COLOR}pkg upgrade, attempt: ${N2_COLOR}${_i}/${cbsd_pkg_retry}${N0_COLOR}"
		${ENV_CMD} ASSUME_ALWAYS_YES=yes IGNORE_OSVERSION=yes ${PKG_PRE} ${PKG_STATIC_PATH} ${PKGARGS} upgrade -g -U -y ${*}
		_ret=$?
		[ ${_ret} -eq 0 ] && break
	done

	# Remove cache in jail
	[ -n "${jname}" -a -d "${path}/var/cache/pkg" ] && ${RM_CMD} -rf ${path}/var/cache/pkg/*

	# overwrite errcode if necessary
	[ ${cbsd_pkg_interrupt_on_error} -eq 0 ] && _ret=0

	return ${_ret}
}

# $1 - destination file
pkg_set_conf()
{
	[ -z "$1" ] && err 1 "pkg_set_conf: please set output file"
	[ -z "${pkgsite}" ] && err 1 "pkg_set_conf: please set pkgsite"
	${SED_CMD} s%PKGSITE%${pkgsite}%g ${PKGCONF_SKEL} > ${1}
}

# First start of pkg
pkg_bootstrap()
{
	local _res _ret _i

	set_bsdenv_by_path -p ${path} -v ${ver}

	# DFLY:
	# make -C /usr pkg-bootstrap
	logfile=$( ${MKTEMP_CMD} )

	if TMPDIR=/tmp ASSUME_ALWAYS_YES=yes \
		SIGNATURE_TYPE=none \
		IGNORE_OSVERSION=yes \
		PACKAGESITE=file:///nonexistent \
		${TIMEOUT_CMD} 10 ${PKG_PRE} ${PKG_STATIC_PATH} info -x 'pkg(-devel)?$' >${logfile} 2>&1; then
			${RM_CMD} -f ${logfile}
			pkg_update
			unset_bsdenv
			return 0
	fi

	printf "${N1_COLOR}pkg: [${N2_COLOR}bootstrap...${N1_COLOR}${N0_COLOR}"

	for _i in $( ${JOT_CMD} ${cbsd_pkg_retry} ); do
		#${ECHO} "${N1_COLOR}pkg bootstrap, attempt: ${N2_COLOR}${_i}/${cbsd_pkg_retry}${N0_COLOR}"
		_res=$( ${TIMEOUT_CMD} 40 ${PKG_PRE} ${ENV_CMD} ASSUME_ALWAYS_YES=yes SIGNATURE_TYPE=none IGNORE_OSVERSION=yes ${PKG_STATIC_PATH} ${PKGARGS} bootstrap > ${logfile} 2>&1 )
		_ret=$?

		if [ ${_ret} -eq 0 ]; then
			printf "${N2_COLOR}ok${N1_COLOR}]${N0_COLOR}"
			echo
			${RM_CMD} -f ${logfile}
			break
		else
			printf "${N1_COLOR}bootstrap failed${N1_COLOR}]${N0_COLOR}"
			${CAT_CMD} ${logfile}
			${RM_CMD} -f ${logfile}
			echo
			echo "${_ret}"
		fi

		if [ ${_ret} -ne 0 ]; then
			unset_bsdenv
			# overwrite errcode if necessary
			[ ${cbsd_pkg_bootstrap_interrupt_on_error} -eq 0 ] && _ret=0
			return ${_ret}
		fi
	done

	pkg_update
	unset_bsdenv

	return ${_ret}
}

# $1 - listfile
install_from_list()
{
	local _ret
	[ ! -f "${1}" ] && err 1 "${N1_COLOR}No such list: ${N2_COLOR}${1}${N0_COLOR}"
	PKGLIST=$( ${CAT_CMD} ${1} | ${XARGS_CMD} )
	printf "install for ${PKGLIST}...${N1_COLOR}]${N0_COLOR}\n"

	# retry if failed
	for _i in $( ${JOT_CMD} ${cbsd_pkg_retry} ); do
		${ECHO} "${N1_COLOR}pkg install from list, attempt: ${N2_COLOR}${_i}/${cbsd_pkg_retry}${N0_COLOR}"
		${PKG_PRE} ${PKG_STATIC_PATH} install ${PKGLIST}
		_ret=$?
		[ ${_ret} -eq 0 ] && break
	done

	# Remove cache in jail
	[ -n "${jname}" -a -d "${path}/var/cache/pkg" ] && ${RM_CMD} -rf ${path}/var/cache/pkg/*

	/usr/local/bin/cbsd unmountfstab jroot=${path} fstab=${mount_fstab} > /dev/null 2>&1
	${UMOUNT_CMD} -f ${path}/dev
	unmountbase
	[ "${delpkglist}" = "1" ] && ${RM_CMD} -f ${pkglist}

	# overwrite errcode if necessary
	[ ${cbsd_pkg_interrupt_on_error} -eq 0 ] && _ret=0

	return ${_ret}
}
