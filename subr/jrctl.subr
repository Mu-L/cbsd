if [ ! "$_CBSD_JRCTL_SUBR" ]; then
_CBSD_JRCTL_SUBR=1
###

#### INIT JRCTL_CPUSET_CORE_X VARS: Look at the end.


# return true if variable in RCTL_HUMANIZE list
rctl_humanize()
{
	local _i _res=0

	[ "${human}" = "0" ] && return 1

	for _i in ${RCTL_HUMANIZE}; do
		[ "${1}" = "${_i}" ] && return 0
	done

	return 1
}


# -m method: process|jail (req.)
# -h humanize values if set (opt, default = unset)
# -j jname (req. for jail method)
# -p pid (req. for process method)
# -s show field, e.g memoryuse, pcpu
# sample:
#  get_rctl_values -m process -p 14896 -s memoryuse -h
get_rctl_values()
{
	local _str
	local _human=0
	local _jname=
	local _method=
	local _pid=
	local _human_arg=
	local _show=
	local _res=
	local _vm_cpus

	while getopts "hj:m:p:s:" opt; do
		case "$opt" in
			h) _human="1" ;;
			j) _jname="${OPTARG}" ;;
			m) _method="${OPTARG}" ;;
			p) _pid="${OPTARG}" ;;
			s) _show="${OPTARG}" ;;
		esac
		shift $(($OPTIND - 1))
	done

	[ "${_human}" = "1" ] && _human_arg="-h"
	[ -z "${_jname}" ] && _jname="${jname}"
	[ -z "${_jname}" ] && return 0

	case "${_method}" in
		process)
			eval $( ${RCTL_CMD} -u ${_human_arg} process:${_pid} 2>/dev/null )
			;;
		jail)
			eval $( ${RCTL_CMD} -a jail:${_jname}:$_p 2>/dev/null )
			;;
	esac

	if [ "${emulator}" = "bhyve" ]; then
		_vm_cpus=$( cbsdsqlro ${jailsysdir}/${_jname}/local.sqlite "SELECT vm_cpus FROM settings ORDER BY (created) DESC LIMIT 1" )
		# take into account multi-core guest in pcpu value
		# On multi-core guest we need to: pcpu / vm_cpus
		[ ${_vm_cpus} -gt 1 ] && pcpu=$(( pcpu / _vm_cpus ))
	fi

	# todo: for each $rctl and validate
	# if _show=1, unset unecessary variables

	if [ -n "${_show}" ]; then
		eval _res="\$${_show}"
		echo "${_res}"
	fi
}


jrctl_list_cpuset()
{
	local _i _passenger _mask

	case "${platform}" in
		DragonFly|Linux)
			true
			return 0
			;;
	esac

	cbsdjls | while read _jid _name; do
		echo "JID ${_jid} ${_name}"
		_mask=$( ${CPUSET_CMD} -g -j ${_jid} 2>/dev/null | ${GREP_CMD} "^jail ${_jid} mask:" | ${CUT_CMD} -d ':' -f 2-100 | ${TR_CMD} -d ',' )
		[ -z "${_mask}" ] && continue
		echo "MASK for ${_name}: ${_mask}"
	done

	for _i in $( ${SEQ_CMD} 0 ${JRCTL_SEQ_CPU_ID} ); do
		eval _passenger=\$JRCTL_CPUSET_CORE_${_i}
		echo "JRCTL_CPUSET_CORE_${_i}: ${_passenger}"
	done
}

jrctl_get_next_cpuset()
{
	local _min=1024 _id=0
	local _i

	for _i in $( ${SEQ_CMD} 0 ${JRCTL_SEQ_CPU_ID} ); do
		eval _passenger=\$JRCTL_CPUSET_CORE_${_i}
		[ "${_passenger}" = "0" ] && _id="${_i}" && break

		if [ ${_passenger} -lt ${_min} ]; then
			#echo "new min found: id:${_i} = _passenger:${_passenger}"
			_min="${_passenger}"
			_id="${_i}"
		fi
	done

	JRCTL_CPUSET_CORE="${_id}"
}

jrctl_increment_cpuset()
{
	local _id="${1}"

	eval _passenger=\$JRCTL_CPUSET_CORE_${_id}
	#echo "INCREMENT CORE ${_id}"
	_passenger=$(( _passenger + 1 ))
	eval JRCTL_CPUSET_CORE_${_id}=${_passenger}
}

jrctl_decrement_cpuset()
{
	local _id="${1}"

	eval _passenger=\$JRCTL_CPUSET_CORE_${_id}
	[ "${_passenger}" = "0" ] && return
	_passenger=$(( _passenger - 1 ))
	eval JRCTL_CPUSET_CORE_${_id}=${_passenger}
}


#### INIT JRCTL_CPUSET_CORE_X VARS
if [ -z "${ncpu}" ]; then
	case "${platform}" in
		Linux)
			ncpu=$(  ${GREP_CMD} -E "^vendor_id" /proc/cpuinfo | ${WC_CMD} -l )
			;;
		*)
			ncpu=$( ${SYSCTL_CMD} -qn hw.ncpu | ${AWK_CMD} '{printf $1}' )
			;;
	esac
fi

JRCTL_SEQ_CPU_ID=$(( ncpu - 1 ))

# init JRCTL_CPUSET_CORE ( jrctl_\* func )
for _i in $( ${SEQ_CMD} 0 ${JRCTL_SEQ_CPU_ID} ); do
	eval JRCTL_CPUSET_CORE_${_i}="0"
done

case "${platform}" in
	DragonFly|Linux)
		jrctl_jid=
		;;
	*)
		jrctl_jid=$( cbsdjls -q | ${TR_CMD} -d \\r\\n )
		;;
esac

for i in ${jrctl_jid}; do
	mask=$( ${CPUSET_CMD} -g -j ${i} 2>/dev/null | ${GREP_CMD} "^jail ${i} mask:" | ${CUT_CMD} -d ':' -f 2-100 | ${TR_CMD} -d ',' )
	[ -z "${mask}" ] && continue
	for x in ${mask}; do

		#echo "jid $i: jrctl_increment_cpuset ${x}"
		jrctl_increment_cpuset ${x}
	done
done

###
fi
