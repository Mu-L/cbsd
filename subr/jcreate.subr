if [ ! "$_CBSD_JCREATE_SUBR" ]; then
_CBSD_JCREATE_SUBR=1
###

# export JARG
. ${distsharedir}/jail-arg

# postaction for bsdconf-related module action
# pkg, useradd, password etc
# $1 - set $jname
# $2 - jconf (for fromfile)
postcreate_module_action()
{
	local jname jconf _ret=0 _logfile

	[ -n "${1}" ] && jname="${1}"
	[ -n "${2}" ] && jconf="${2}"

	[ -n "${opkg_bootstrap}" ] && pkg_bootstrap="${opkg_bootstrap}"

	_logfile=$( ${MKTEMP_CMD} )
	trap "${RM_CMD} -f ${_logfile}" HUP INT ABRT BUS TERM EXIT

	if [ -n "${user_pw_root_crypt}" ]; then
		passwd jname=${jname} login="root" epw="${user_pw_root_crypt}" > ${_logfile} 2>&1
	elif [ -n "${user_pw_root}" ]; then
		passwd jname=${jname} login="root" pw="${user_pw_root}" > ${_logfile} 2>&1
	fi

	if [ -n "${sysrc_enable}" ]; then
		for i in ${sysrc_enable}; do
			# use CBSD sysrc from bsdconf.d
			sysrc jname=${jname} ${i}_enable="YES" > ${_logfile} 2>&1
		done
	fi

	if [ -n "${user_add}" ]; then
		if [ -n "${jconf}" ]; then
			${ECHO} "${N1_COLOR}Adding users: ${N2_COLOR}${user_add}${N0_COLOR}"
			# use CBSD adduser from bsdconf.d
			adduser jname=${jname} mode=add fromfile="${jconf}" > ${_logfile} 2>&1
		fi
	fi

	[ -n "${odelpkglist}" ] && delpkglist="${odelpkglist}"
	[ -z "${delpkglist}" ] && delpkglist=0

	#[ ${applytpl} -eq 1 ] && ${miscdir}/config_pkgrepo -t ${etcdir}/pkg.conf -v ${ver} -a ${arch} ${data}
	# pkg area
	if [ "${pkg_bootstrap}" = "1" ]; then
		# Dup for modules/pkg/pkg.subr init_path func
		if [ "${platform}" != "DragonFly" ]; then
			# not for DFLY: https://mirror-master.dragonflybsd.org/dports/bootstraps/bootstrap_pkg_03_x86-64.tar.xz have old pkg, we use pkg-static from the base,
			# thanks to preparebase
			if [ "${ver}" != "empty" ]; then
				pkg mode=bootstrap jname=${jname} cbsd_pkg_verbose=0 > ${_logfile} 2>&1
				_ret=$?
				if [ ${_ret} -ne 0 ]; then
					${ECHO} "${N1_COLOR}${CBSD_APP}: ${W1_COLOR}pkg bootstrap error:${N0_COLOR}"
					echo "--"
					${CAT_CMD} ${_logfile}
					echo "--"
					${RM_CMD} -f ${_logfile}
					return ${_ret}
				fi
			fi
		fi
		if [ -n "${pkglist}" -a "${pkglist}" != "NO" -a "${ver}" != "empty" ]; then
			if [ ! -f "${pkglist}" ]; then
				# use CBSD pkg from pkg.d
				pkg mode=install jname=${jname} ${pkglist} cbsd_pkg_verbose=1 > ${_logfile} 2>&1
				_ret=$?
				if [ ${_ret} -ne 0 ]; then
					${CAT_CMD} ${_logfile}
					${RM_CMD} -f ${_logfile}
					return ${_ret}
				else
					${CAT_CMD} ${_logfile}
				fi
			else
				# use CBSD pkg from pkg.d
				pkg mode=install pkglist="${pkglist}" jname=${jname} cbsd_pkg_verbose=1 > ${_logfile} 2>&1
				_ret=$?
				[ ${delpkglist} -eq 1 ] && ${RM_CMD} -f ${pkglist}
				if [ ${_ret} -ne 0 ]; then
					${CAT_CMD} ${_logfile}
					${RM_CMD} -f ${_logfile}
					return ${_ret}
				else
					${CAT_CMD} ${_logfile}
				fi
			fi
		fi
	fi

	${RM_CMD} -f ${_logfile}
	return ${_ret}
}

# users custom stop script
# -s - is source dir (stop.d start.d)
# -a auto-start if status off (create.d)
external_exec_script()
{
	local _res
	local _dir
	local _astart=0
	local _shutdown=0
	local _fexist=

	while getopts "as:" opt; do
		case "${opt}" in
			a) _astart="1" ;;
			s) _dir="${OPTARG}" ;;
		esac
		shift $(($OPTIND - 1))
	done

	[ -z "${_dir}" ] && return 1

	[ ! -d "${jailsysdir}/${jname}/${_dir}" ] && return 0
	_fexist=$( ${FIND_CMD} ${jailsysdir}/${jname}/${_dir}/ -mindepth 1 -maxdepth 1 -type f -and -not -name placeholder -exec ${BASENAME_CMD} {} \; )
	[ -z "${_fexist}"  ] && return 0
	[ -d "${data}/tmp/${_dir}" ] && ${RM_CMD} -rf "${data}/tmp/${_dir}"
	${CP_CMD} -a "${jailsysdir}/${jname}/${_dir}" ${data}/tmp/${_dir}

	. ${subrdir}/rcconf.subr

	if [ ${jid} -eq 0 -a ${_astart} -eq 1 ]; then
		# Jail should be running
		${ECHO} "${N1_COLOR}Jail has custom exec script [${_fexist}], run it for a while...${N0_COLOR}"
		_shutdown=1
		jstart ${jname}
	fi

	${FIND_CMD} "${data}/tmp/${_dir}" -mindepth 1 -maxdepth 1 \( -type l -or -type f \) -and  \( -perm -u=x -o -perm -g=x -o -perm -o=x \) -exec ${BASENAME_CMD} {} \; | while read _file; do
		${ECHO} "${N1_COLOR}Execute script: ${N2_COLOR}${_file}${N0_COLOR}"
		jexec jname="${jname}" /tmp/${_dir}/${_file}
	done

	if [ ${_shutdown} -eq 1 ]; then
		# Jail was offline, stop
		jstop ${jname}
	fi

	${RM_CMD} -rf "${data}/tmp/${_dir}"
}

# users custom stop for executing in master host
# $1 - is source dir name ( master_poststop.d master_prestop.d )
# can be full path to dir when started by '/'
external_exec_master_script()
{
	local _res
	local _dir="${1}"
	local _prefix
	local _srcdir

	[ -z "${_dir}" ] && return 1

	_prefix=$( substr --pos=0 --len=1 --str="${_dir}" )
	if [ "${_prefix}" = "/" ]; then
		_srcdir="${_dir}"
	else
		_srcdir="${jailsysdir}/${jname}/${_dir}"
	fi

	[ ! -d "${_srcdir}" ] && return 0
	[ -z "$( ${LS_CMD} ${_srcdir}/ )" ] && return 0

	local CBSDPATH="${PATH}"
	# reset CBSD PATH
	# it is necessary that the calling of any commands from external hooks
	# does not conflict with the same CBSD commands that the user does not expect
	export PATH="/sbin:/bin:/usr/sbin:/usr/bin:/usr/local/sbin:/usr/local/bin"

	# reset CBSD_CWD/CBSD_PWD ( can affect when work via CBSDfile )
	local OCBSD_CWD="${CBSD_CWD}"
	local OCBSD_PWD="${CBSD_PWD}"
	export CBSD_CWD=""
	export CBSD_PWD=""

	${FIND_CMD} "${_srcdir}" -mindepth 1 -maxdepth 1 \( -type l -or -type f \) -and  \( -perm -u=x -o -perm -g=x -o -perm -o=x \) -exec ${BASENAME_CMD} {} \; | while read _file; do
		${ECHO} "${N1_COLOR}Execute master script: ${N2_COLOR}${_file}${N0_COLOR}"
		${ECHO} "${N1_COLOR} :: ${_srcdir}/${_file}${N0_COLOR}"
		${_srcdir}/${_file}
	done

	# restore CBSD PATH
	export PATH="${CBSDPATH}"

	# restore CBSD_CWD/CBSD_PWD
	export CBSD_CWD="${OCBSD_CWD}"
	export CBSD_PWD="${OCBSD_PWD}"
}

# users custom local script for external operate with data
# $1 - is source dir name ( clone.d rename.d .. )
# return code:
#   - 0 - no custom local script ( skip )
#   - 1 - script(s) exist and executed successful
#   - 2 - script(s) exist but execution failed ( cancel operation )
external_exec_local_script()
{
	local _res
	local _dir="${1}"
	local _ret=0

	[ -z "${_dir}" ] && return 1

	local _srcdir="${jailsysdir}/${jname}/${_dir}"

	[ ! -d "${_srcdir}" ] && return 0
	[ -z "$( ${LS_CMD} ${_srcdir}/ )" ] && return 0

	local CBSDPATH="${PATH}"
	# reset CBSD PATH
	# it is necessary that the calling of any commands from external hooks
	# does not conflict with the same CBSD commands that the user does not expect
	export PATH="/sbin:/bin:/usr/sbin:/usr/bin:/usr/local/sbin:/usr/local/bin"

	${FIND_CMD} "${_srcdir}" -mindepth 1 -maxdepth 1 \( -type l -or -type f \) -and  \( -perm -u=x -o -perm -g=x -o -perm -o=x \) -exec ${BASENAME_CMD} {} \; | while read _file; do
		${ECHO} "${N1_COLOR}Execute local script: ${N2_COLOR}${_file}${N0_COLOR}"
		${ECHO} "${N1_COLOR} :: ${_srcdir}/${_file}${N0_COLOR}"
		${_srcdir}/${_file}
		_ret=$?
		[ ${_ret} -ne 0 ] && exit 2
	done

	_ret=$?

	# restore CBSD PATH
	export PATH="${CBSDPATH}"
	return ${_ret}
}

exec_master_prestop()
{
	eval CMD=\${exec_master_prestop}
	[ -z "${CMD}" -o "${CMD}" = "0" ] && return 0

	local CBSDPATH="${PATH}"
	# reset CBSD PATH
	# it is necessary that the calling of any commands from external hooks
	# does not conflict with the same CBSD commands that the user does not expect
	export PATH="/sbin:/bin:/usr/sbin:/usr/bin:/usr/local/sbin:/usr/local/bin"

	${ECHO} "${N1_COLOR}${jname} Master exec prestop: ${N2_COLOR}${CMD}${N0_COLOR}"
	${CMD}
	# restore CBSD PATH
	export PATH="${CBSDPATH}"
}

exec_prestop()
{
	eval CMD=\${exec_prestop}
	[ -z "${CMD}" -o "${CMD}" = "0" ] && return 0

	local CBSDPATH="${PATH}"
	# reset CBSD PATH
	# it is necessary that the calling of any commands from external hooks
	# does not conflict with the same CBSD commands that the user does not expect
	export PATH="/sbin:/bin:/usr/sbin:/usr/bin:/usr/local/sbin:/usr/local/bin"

	${ECHO} "${N1_COLOR}${jname} exec exec_prestop: ${N2_COLOR}${CMD}${N0_COLOR}"
	${CHROOT_CMD} ${path} ${CMD}
	# restore CBSD PATH
	export PATH="${CBSDPATH}"
}


exec_master_poststop()
{
	eval CMD=\${exec_master_poststop}
	[ -z "${CMD}" -o "${CMD}" = "0" ] && return 0

	local CBSDPATH="${PATH}"
	# reset CBSD PATH
	# it is necessary that the calling of any commands from external hooks
	# does not conflict with the same CBSD commands that the user does not expect
	export PATH="/sbin:/bin:/usr/sbin:/usr/bin:/usr/local/sbin:/usr/local/bin"

	${ECHO} "${N1_COLOR}${jname} Master exec afterstop: ${N2_COLOR}${CMD}${N0_COLOR}"
	${CMD}
	# restore CBSD PATH
	export PATH="${CBSDPATH}"
}

exec_poststop()
{
	eval CMD=\${exec_poststop}
	[ -z "${CMD}" -o "${CMD}" = "0" ] && return 0

	local CBSDPATH="${PATH}"
	# reset CBSD PATH
	# it is necessary that the calling of any commands from external hooks
	# does not conflict with the same CBSD commands that the user does not expect
	export PATH="/sbin:/bin:/usr/sbin:/usr/bin:/usr/local/sbin:/usr/local/bin"

	${ECHO} "${N1_COLOR}${jname} exec exec_poststop: ${N2_COLOR}${CMD}${N0_COLOR}"
	${CHROOT_CMD} ${path} ${CMD}
	# restore CBSD PATH
	export PATH="${CBSDPATH}"
	i=$((i + 1))
}

exec_master_poststart()
{
	eval CMD=\${exec_master_poststart}
	[ -z "${CMD}" -o "${CMD}" = "0" ] && return 0

	local CBSDPATH="${PATH}"
	# reset CBSD PATH
	# it is necessary that the calling of any commands from external hooks
	# does not conflict with the same CBSD commands that the user does not expect
	export PATH="/sbin:/bin:/usr/sbin:/usr/bin:/usr/local/sbin:/usr/local/bin"

	${ECHO} "${N1_COLOR}${jname} Master exec afterstart: ${N2_COLOR}${CMD}${N0_COLOR}"
	${CMD}
	# restore CBSD PATH
	export PATH="${CBSDPATH}"
}

exec_poststart()
{
	eval CMD=\${exec_poststart}
	[ -z "${CMD}" -o "${CMD}" = "0" ] && return 0

	${ECHO} "${N1_COLOR}${jname} exec exec_poststart: ${N2_COLOR}${CMD}${N0_COLOR}"
	jexec jname=${jname} ${CMD}
}

exec_cbsdjail_first_boot()
{
	if [ -f ${path}/etc/rc.cbsdjail_first_boot ]; then
		jexec jname=${jname} /bin/sh /etc/rc.cbsdjail_first_boot
		${RM_CMD} -f ${path}/etc/rc.cbsdjail_first_boot
	fi
}

exec_master_prestart()
{
	eval CMD=\${exec_master_prestart}
	[ -z "${CMD}" -o "${CMD}" = "0" ] && return 0

	local CBSDPATH="${PATH}"
	# reset CBSD PATH
	# it is necessary that the calling of any commands from external hooks
	# does not conflict with the same CBSD commands that the user does not expect
	export PATH=/sbin:/bin:/usr/sbin:/usr/bin:/usr/local/sbin:/usr/local/bin

	${ECHO} "${N1_COLOR}${jname} master exec prestart: ${N2_COLOR}${CMD}${N0_COLOR}"
	${CMD}
	# restore CBSD PATH
	export PATH="${CBSDPATH}"
}

exec_prestart()
{
	eval CMD=\${exec_prestart}
	[ -z "${CMD}" -o "${CMD}" = "0" ] && return 0

	${ECHO} "${N1_COLOR}${jname} exec exec_prestart: ${N2_COLOR}${CMD}${N0_COLOR}"
	jexec jname=${jname} ${CMD}
}

# $* - additional vars, e.g: $data, $newdata
export_bhyve_data_for_external_hook()
{
	local nic_id _i T

	. ${subrdir}/vnet.subr		# for get_vm_uplink_interface

	# export variables for external hooks
	export jname=${jname}
	[ -n "${ip4_addr}" ] && geniplist "${ip4_addr}"

	for _i in ${JARG} ${MYCOL} ipv4_first_public ipv4_first_private ipv4_first ipv6_first_public ipv6_first_private ipv6_first bhyve_vnc_tcp_ipconnect $*; do
		T=
		eval T="\$$_i"
		export ${_i}="${T}"
	done

	# Export additional data to hooks
	if [ -r "${jailsysdir}/${jname}/vnc_port" ]; then
		vm_vnc_port=$( ${CAT_CMD} ${jailsysdir}/${jname}/vnc_port )
		export vm_vnc_port="${vm_vnc_port}"
	fi

	nic_id=0

	local sqldelimer=" "

	eval $( cbsdsqlro ${jailsysdir}/${jname}/local.sqlite "SELECT nic_hwaddr,nic_parent FROM bhyvenic" | while read nic_hwaddr nic_parent; do
		echo "export nic_hwaddr${nic_id}=\"${nic_hwaddr}\""
		get_vm_uplink_interface -p ${nic_parent} -r 1
		echo "export nic_parent${nic_id}=\"${interface}\""
		nic_id=$(( nic_id + 1 ))
	done )
	return 0
}

# $* - additional vars, e.g: $data, $newdata
export_qemu_data_for_external_hook()
{
	local nic_id _i T

	. ${subrdir}/vnet.subr		# for get_vm_uplink_interface

	# export variables for external hooks
	export jname=${jname}
	[ -n "${ip4_addr}" ] && geniplist "${ip4_addr}"

	# todo: spice
	for _i in ${JARG} ${MYCOL} ipv4_first_public ipv4_first_private ipv4_first ipv6_first_public ipv6_first_private ipv6_first qemu_vnc_tcp_ipconnect $*; do
		T=
		eval T="\$$_i"
		export ${_i}="${T}"
	done

	# todo: spice
	# Export additional data to hooks
	if [ -r "${jailsysdir}/${jname}/vnc_port" ]; then
		vm_vnc_port=$( ${CAT_CMD} ${jailsysdir}/${jname}/vnc_port )
		export vm_vnc_port="${vm_vnc_port}"
	fi

	nic_id=0

	local sqldelimer=" "

	eval $( cbsdsqlro ${jailsysdir}/${jname}/local.sqlite "SELECT nic_hwaddr,nic_parent FROM qemunic" | while read nic_hwaddr nic_parent; do
		echo "export nic_hwaddr${nic_id}=\"${nic_hwaddr}\""
		get_vm_uplink_interface -p ${nic_parent} -r 1
		echo "export nic_parent${nic_id}=\"${interface}\""
		nic_id=$(( nic_id + 1 ))
	done )
	return 0
}


# $* - additional vars, e.g: $data, $newdata
export_jail_data_for_external_hook()
{
	local nic_id _i T

	. ${subrdir}/vnet.subr		# for get_vm_uplink_interface

	# export variables for external hooks
	# todo: first_ipv4_addr + first_ipv6_addr
	export jname=${jname}

	[ -n "${ip4_addr}" ] && geniplist "${ip4_addr}"

	for _i in ${JARG} ipv4_first_public ipv4_first_private ipv4_first ipv6_first_public ipv6_first_private ipv6_first nic_address $*; do
		T=
		eval T="\$$_i"
		export ${_i}="${T}"
	done

	if [ -r ${jailsysdir}/${jname}/local.sqlite ]; then
		nic_address=$( cbsdsqlro ${jailsysdir}/${jname}/local.sqlite "SELECT nic_address FROM jailnic LIMIT 1" )
		[ -z "${nic_address}" ] && nic_address="0"
	else
		nic_address="0"
	fi

	if [ ${vnet} -eq 1 ]; then
		nic_id=0

		local sqldelimer=" "

		eval $( cbsdsqlro ${jailsysdir}/${jname}/local.sqlite "SELECT nic_hwaddr,nic_parent,nic_address FROM jailnic" | while read nic_hwaddr nic_parent nic_address; do
			echo "export nic_hwaddr${nic_id}=\"${nic_hwaddr}\""
			echo "export nic_address${nic_id}=\"${nic_address}\""
			get_vm_uplink_interface -p ${nic_parent}
			echo "export nic_parent${nic_id}=\"${interface}\""
			nic_id=$(( nic_id + 1 ))
		done )
	fi

	return 0
}

###
fi
