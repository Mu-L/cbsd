# shellcheck shell=sh

bhyve_ssh_wait()
{
	local _orig_options
	_orig_options=$( set +o )

	# disable errexit/xtrace settings for a while..
	set +o xtrace
	set +o errexit

	local _attempt_max=60 _i _x _y
	readconf cbsdfile.conf
	if [ -n "${bhyve_ssh_wait_timeout}" ]; then
		_attempt_max="${bhyve_ssh_wait_timeout}"
	fi

	printf "${N1_COLOR}waiting VM ssh (${_attempt_max}s): ${N2_COLOR}${jname}${N0_COLOR}"
	# wait for VM boot
	# Some OSes are unstable after the first connection, we will check three times for stability
	pass=0
	_y=2		# test for timeout exceed
	printf "${N1_COLOR}[" 1>&1
	for _i in $( ${SEQ_CMD} 1 ${_attempt_max} ); do
		#_x=$( timeout 10 cbsd bexec jname=${jname} date > /dev/null 2>&1 )
		_x=$( timeout 10 cbsd bexec jname=${jname} date > /dev/null 2>&1 )
		if [ $? -eq 0 ]; then
			pass=$(( pass + 1 ))
		else
			pass=0
		fi
		case ${pass} in
			0)
				printf "." 1>&2
				;;
			1)
				printf "o" 1>&2
				;;
			3)
				printf "O" 1>&2
				;;
		esac
		# when three times pass, we believe that the system is stable
		[ ${pass} -eq 3 ] && break
		_y=$(( _y + 1 ))
		# some ssh flop, wait for stabilize (todo: more retry support?)
		sleep 2
		# todo: delete only ip
		# ipv6?
		[ -z "${CLOUD_URL}" ] && ${ARP_CMD} -d -n ${ci_ip4_addr} > /dev/null 2>&1
		if [ ${_y} -eq ${_attempt_max} ]; then
			# restore old settings
			set ${_orig_options}
			return 1
		fi
	done
	${ECHO} ": ${N2_COLOR}${_y}${N1_COLOR}/${_attempt_max}]${N0_COLOR}" 1>&1

	${ECHO} "${N1_COLOR}bhyve ssh available${N0_COLOR}"
	# restore old settings
	set ${_orig_options}

	return 0
}

jail_ssh_wait()
{
	local _orig_options
	_orig_options=$( set +o )

	# disable errexit/xtrace settings for a while..
	set +o xtrace
	set +o errexit

	local _attempt_max=60 _i _x _y
	readconf cbsdfile.conf
	if [ -n "${jail_ssh_wait_timeout}" ]; then
		_attempt_max="${jail_ssh_wait_timeout}"
	fi

	printf "${N1_COLOR}waiting jail ssh (${_attempt_max}s): ${N2_COLOR}${jname}${N0_COLOR}"
	# wait for VM boot
	# Some OSes are unstable after the first connection, we will check three times for stability
	pass=0
	_y=2		# test for timeout exceed
	printf "${N1_COLOR}[" 1>&1
	for _i in $( ${SEQ_CMD} 1 ${_attempt_max} ); do
		#_x=$( timeout 10 cbsd jexec jname=${jname} date > /dev/null 2>&1 )
		_x=$( timeout 10 cbsd jexec jname=${jname} date > /dev/null 2>&1 )
		if [ $? -eq 0 ]; then
			pass=$(( pass + 1 ))
		else
			pass=0
		fi
		case ${pass} in
			0)
				printf "." 1>&2
				;;
			1)
				printf "o" 1>&2
				;;
			3)
				printf "O" 1>&2
				;;
		esac
		# when three times pass, we believe that the system is stable
		[ ${pass} -eq 3 ] && break
		_y=$(( _y + 1 ))
		# some ssh flop, wait for stabilize (todo: more retry support?)
		sleep 2
		# todo: delete only ip
		[ -z "${CLOUD_URL}" ] && ${ARP_CMD} -d -n ${ci_ip4_addr} > /dev/null 2>&1
		if [ ${_y} -eq ${_attempt_max} ]; then
			# restore old settings
			set ${_orig_options}
			return 1
		fi
	done
	${ECHO} ": ${N2_COLOR}${_y}${N1_COLOR}/${_attempt_max}]${N0_COLOR}" 1>&1

	${ECHO} "${N1_COLOR}jail ssh available${N0_COLOR}"
	# restore old settings
	set ${_orig_options}

	return 0
}

# testing/wip
run_jail_cloud()
{
	local CURL_CMD=$( which curl )
	local JQ_CMD=$( which jq )

	[ -z "${CURL_CMD}" ] && err 1 "${N1_COLOR}cloud up requires curl, please install: ${N2_COLOR}pkg install -y curl${N0_COLOR}"
	[ -z "${JQ_CMD}" ] && err 1 "${N1_COLOR}cloud up requires jq, please install: ${N2_COLOR}pkg install -y textproc/jq${N0_COLOR}"

	[ -z "${image}" ] && image="jail"

	${ECHO} "${N1_COLOR}run image via: ${N2_COLOR}${CLOUD_URL}${N0_COLOR}" 1>&2
	[ -z "${ssh_wait}" ] && ssh_wait=0

	${CAT_CMD} > up-${jname}.json <<EOF
{
  "type": "jail",
  "host_hostname": "${host_hostname}",
  "imgsize": "${imgsize}",
  "ram": "${vm_ram}",
  "cpus": "${vm_cpus}",
  "image": "${image}",
  "pkglist": "${pkglist}",
  "extras": "${extras}",
  "recomendation": "${recomendation}",
  "pubkey": "${CLOUD_KEY}"
}
EOF

	${CAT_CMD} > deploy-${jname}.sh <<EOF
${CURL_CMD} --no-progress-meter -X POST -H "Content-Type: application/json" -d @up-${jname}.json ${CLOUD_URL}/api/v1/create/${jname} | ${JQ_CMD}
EOF
	${CHMOD_CMD} +x deploy-${jname}.sh
	./deploy-${jname}.sh
	# without debug
	${RM_CMD} -f ./deploy-${jname}.sh ./up-${jname}.json

	#if fn_exists postcreate_${jname} 2>/dev/null; then
		# we cannot execute the postcreate function
		# if we do not wait for ssh, force ssh_wait?
		#jail_ssh_wait=1
	#fi

	if [ ${ssh_wait} -eq 1 ]; then
		jail_ssh_wait
		ret=$?
	else
		ret=0
	fi

	if [ ${ret} -eq 0 ]; then
		#jail_${jname}		# re-read variables

		if fn_exists postcreate_${jname} 2>/dev/null; then
			${ECHO} "${N1_COLOR}  == execute postcreate function for: ${N2_COLOR}${jname}${N0_COLOR}" 1>&2

			# export facts - cloud?
			# . ${subrdir}/jcreate.subr               # for export_jail_data_for_external_hook
			#export_jail_data_for_external_hook

			# export some variables via H_CBSD_ (for scp,expose, and so on...)
			export H_CBSD_jname="${jname}"

			# cleanup jail when postcreate action failed
			if [ -n "${oupfile_destroy_failed}" ]; then
				UPFILE_DESTROY_FAILED="${oupfile_destroy_failed}"
			fi
			if [ -n "${UPFILE_DESTROY_FAILED}" ]; then
				upfile_destroy_failed="${UPFILE_DESTROY_FAILED}"
			fi
			if [ "${upfile_destroy_failed}" = "1" ]; then
				trap "set +o xtrace; cd ${OBSD_PWD}; ${ECHO} \"${N1_COLOR}  == execute postcreate function for: ${N2_COLOR}${jname}: ${W1_COLOR}failed${N1_COLOR} : cleanup${N0_COLOR}\" 1>&2  ; jremove ${jname}" HUP INT ABRT BUS TERM EXIT
			else
				trap "set +o xtrace; cd ${OBSD_PWD}; ${ECHO} \"${N1_COLOR}  == execute postcreate function for: ${N2_COLOR}${jname}: ${W1_COLOR}failed${N1_COLOR} : upfile_destroy_failed=0${N0_COLOR}\" 1>&2 ; " HUP INT ABRT BUS TERM EXIT
			fi
			set -o errexit
			set -o xtrace

			postcreate_${jname}

			set +o xtrace
			set +o errexit
			unset H_CBSD_jname
			trap "" HUP INT ABRT BUS TERM EXIT
			${ECHO} "${N1_COLOR}  == execute postcreate function for: ${N2_COLOR}${jname}: ${H3_COLOR}success${N0_COLOR}" 1>&2
		else
			${ECHO} "${N1_COLOR}  == postcreate function not specified: postcreate_${N2_COLOR}${jname}${N0_COLOR}" 1>&2
		fi

		jname="${ojname}"
		# per-env postup func
		if fn_exists postup_${jname} 2>/dev/null; then
			${ECHO} "${N1_COLOR}execute postup_${jname}${N0_COLOR}"
			postup_${jname}
			jname="${ojname}"		# for corrupted/changed jname in func
		fi
	else
		[ ${ssh_wait} -eq 1 ] && err 1 "${N1_COLOR}ssh failed${N0_COLOR}"
	fi

	return 0
}

f_getvar()
{
	local __var_to_get="$1" __var_to_set="$2"
	[ "$__var_to_set" ] || local value
	eval [ \"\${$__var_to_get+set}\" ]
	local __retval=$?
	eval ${__var_to_set:-value}=\"\${$__var_to_get}\"
	[ "$__var_to_set" ] || { [ "$value" ] && echo "$value"; }
	return $__retval
}

run_jail()
{
	local _val _ret MYOPTARG JAIL_ARGS i ojname _delpkglist _res _tmp
	[ -z "${jname}" ] && err 1 "${N1_COLOR}run_jail: empty jname${N0_COLOR}"

	# should be in sync with jcreate script
	MYOPTARG="jconf inter customskel fstablocal delpkglist removejconf pkglist jprofile zfs_snapsrc pkg_bootstrap autorestart runasap etcupdate_init quiet sysrc from"
	. ${distsharedir}/jail-arg
	[ "${racct}" = "1" ] && . ${distsharedir}/rctl.conf
	JAIL_ARGS="${JARG}"
	MYOPTARG="${MYOPTARG} ${JAIL_ARGS} ${RCTL} ${RCTL_EXTRA} forms"

	if [ -n "${CLOUD_URL}" ]; then
		# unset all
		ojname="${jname}"

		for i in ${JAIL_ARGS}; do
			unset ${i}
		done

		jname="${ojname}"
		jail_${jname}

		run_jail_cloud
		_ret=$?
		return ${_ret}
	fi

	. ${subrdir}/rcconf.subr
	[ $? -eq 0 ] && err 1 "${N1_COLOR}already exist: ${N2_COLOR}${jname}${N0_COLOR}"

	ojname="${jname}"

	# push old cbsd workdir
	ocbsd_workdir="${workdir}"

	# unset all
	for i in ${MYOPTARG}; do
		unset ${i}
	done

	jname="${ojname}"

	# defaults
	readconf jcreate.conf
	readconf cbsdfile.conf

	if fn_exists globals 2>/dev/null; then
		globals
	fi

	jail_${jname}

	JAIL_ARGS=

	# construct non-empty args/params
	for i in ${MYOPTARG} ${RCTL} ${RCTL_EXTRA}; do
		eval _val="\$$i"
		[ -z "${_val}" ] && continue

		case "${i}" in
			pkglist)
				# check if pkglist is file
				strpos --str="${_val}" --search=" "
				if [ $? -eq 0 ]; then
					if [ -r "${myworkdir}/${_val}" ]; then
						_res=$( ${REALPATH_CMD} ${myworkdir}/${_val} 2>/dev/null )
						# check if pkgplist outside CBSDfile directory? ../../
						_tmp=$( ${REALPATH_CMD} ${myworkdir} )
						_ret=$( strlen ${_tmp} )
						_checkpath=$( substr --pos=0 --len=${_ret} --str=${_res} )
						if [ "${_checkpath}" = "${_tmp}" ]; then
							_val="${_res}"
							_delpkglist=0
						else
							# 
							${ECHO} "${N1_COLOR}${CBSD_APP} warning: pkglist outside the CBSDfile directory?: ${N2_COLOR}[${_res}][${_tmp}]${N0_COLOR}"
						fi
					else
						# probably one package
					fi
				fi
				;;
		esac

		if [ -z "${JAIL_ARGS}" ]; then
			JAIL_ARGS="${i}=\"${_val}\""
		else
			JAIL_ARGS="${JAIL_ARGS} ${i}=\"${_val}\""
		fi
	done

	# remote node support: experimental
	# todo: taskd/detached
	if [ -n "${node}" ]; then
		nodescp ${myworkdir}/CBSDfile ${node}:tmp/CBSDfile
		${ECHO} "${N1_COLOR}invoking command: ${N2_COLOR} rexe node=${node} tryoffline=1 /usr/local/bin/cbsd up cbsdfile=~tmp/CBSDfile${N0_COLOR}" | ${TR_CMD} -d \\t
		trap "cd ${OBSD_PWD}" HUP INT ABRT BUS TERM EXIT
		set -o errexit
		rexe node=${node} tryoffline=1 /usr/local/bin/cbsd up cbsdfile=tmp/CBSDfile
		set +o errexit
		exit 0
	fi

	[ -z "${cbsd_workdir}" ] && cbsd_workdir="${ocbsd_workdir}"

	# check for pkglist file exist when vars is empty
	if [ -z "${pkglist}" ]; then
		if [ -r "${myworkdir}/pkglist" ]; then
			JAIL_ARGS="${JAIL_ARGS} pkglist=\"${myworkdir}/pkglist\""
			_delpkglist=0
		fi
	fi

	if [ "${_delpkglist}" = "0" ]; then
		# don't delete pkglist from file
		JAIL_ARGS="${JAIL_ARGS} delpkglist=0"
	fi

	# per-env preup func
	if fn_exists preup_${jname} 2>/dev/null; then
		${ECHO} "${N1_COLOR}execute preup_${jname}${N0_COLOR}"
		preup_${jname}
		jname="${ojname}"		# for corrupted/changed jname in func
		${ECHO} "${N1_COLOR}execute preup_${jname} done${N0_COLOR}"
	fi

	if [ -d ${myworkdir}/skel ]; then
		JAIL_ARGS="${JAIL_ARGS} customskel=${myworkdir}/skel"
	fi
	if [ -d ${myworkdir}/jails-system ]; then
		JAIL_ARGS="${JAIL_ARGS} jailsysskeldir=${myworkdir}/jails-system"
	fi

	${ECHO} "${N1_COLOR}invoking command: ${N2_COLOR} ${ENV_CMD} cbsd_workdir="${cbsd_workdir}" jcreate jname=${jname} ${N1_COLOR}${JAIL_ARGS} ${CBSDFILE_ARGS}${N0_COLOR}" | ${TR_CMD} -d \\t
	trap "cd ${OBSD_PWD}" HUP INT ABRT BUS TERM EXIT
	set -o errexit
	${ENV_CMD} cbsd_workdir="${cbsd_workdir}" jcreate jname=${jname} ${JAIL_ARGS} ${CBSDFILE_ARGS}
	set +o errexit
	trap "" HUP INT ABRT BUS TERM EXIT

	# dynamic extra data?
	if [ -n "${user_add}" ]; then

		for i in ${user_add}; do
			unset login epw pw

			unset pw epw fullname uid home shell secgroup

			f_getvar user_pw_${i} pw
			f_getvar user_pw_${i}_crypt epw
			f_getvar user_gecos_${i} fullname
			f_getvar user_uid_${i} uid
			f_getvar user_home_${i} home
			f_getvar user_shell_${i} shell
			f_getvar user_member_groups_${i} secgroup

			${ECHO} "${N1_COLOR}${CBSD_APP}: add user: ${N2_COLOR}: ${i}${N2_COLOR}" 1>&2
			if [ -n "${pw}" ]; then
				adduser jname=${jname} mode=add pw="${pw}" login="${i}" fullname="${fullname}" secgroup="${secgroup}" shell="${shell}"
			elif [ -n "${epw}" ]; then
				adduser jname=${jname} mode=add epw="${epw}" login="${i}" fullname="${fullname}" secgroup="${secgroup}" shell="${shell}"
			else
				adduser jname=${jname} mode=add epw="*" login="${i}" fullname="${fullname}" secgroup="${secgroup}" shell="${shell}"
			fi
		done
	fi

	. ${subrdir}/rcconf.subr
	jail_${jname}		# re-read variables

	if [ -n "${forms}" ]; then
		${ECHO} "${N1_COLOR}  == apply forms module: ${N2_COLOR}${forms}${N0_COLOR}" 1>&2
		env
		forms jname="${jname}" module="${forms}" inter=0
		ret=$?
	fi

	if fn_exists postcreate_${jname} 2>/dev/null; then
		${ECHO} "${N1_COLOR}  == execute postcreate function for: ${N2_COLOR}${jname}${N0_COLOR}" 1>&2
		# cleanup jail when postcreate action failed

		# cleanup jail when postcreate action failed
		if [ -n "${oupfile_destroy_failed}" ]; then
			UPFILE_DESTROY_FAILED="${oupfile_destroy_failed}"
		fi
		if [ -n "${UPFILE_DESTROY_FAILED}" ]; then
			upfile_destroy_failed="${UPFILE_DESTROY_FAILED}"
		fi
		if [ "${upfile_destroy_failed}" = "1" ]; then
			trap "set +o xtrace; ${ECHO} \"${N1_COLOR}  == execute postcreate function for: ${N2_COLOR}${jname}: ${W1_COLOR}failed${N1_COLOR} : cleanup${N0_COLOR}\" 1>&2  ; jremove ${jname}" HUP INT ABRT BUS TERM EXIT
		else
			trap "set +o xtrace; ${ECHO} \"${N1_COLOR}  == execute postcreate function for: ${N2_COLOR}${jname}: ${W1_COLOR}failed${N1_COLOR} : upfile_destroy_failed=0${N0_COLOR}\" 1>&2 ; " HUP INT ABRT BUS TERM EXIT
		fi

		# export facts
		. ${subrdir}/jcreate.subr               # for export_jail_data_for_external_hook
		ip4_addr=$( jget jname=${jname} mode=quiet ip4_addr 2>/dev/null )
		export_jail_data_for_external_hook

		# export some variables via H_CBSD_ (for scp,expose, and so on...)
		export H_CBSD_jname="${jname}"

		trap "set +o xtrace; cd ${OBSD_PWD}" HUP INT ABRT BUS TERM EXIT

		set -o errexit
		set -o xtrace

		postcreate_${jname}

		set +o xtrace
		set +o errexit
		trap "" HUP INT ABRT BUS TERM EXIT

		# export some variables via H_CBSD_
		unset H_CBSD_jname

		${ECHO} "${N1_COLOR}  == execute postcreate function for: ${N2_COLOR}${jname}: ${H3_COLOR}success${N0_COLOR}" 1>&2
	else
		${ECHO} "${N1_COLOR}  == postcreate function not specified: postcreate_${N2_COLOR}${jname}${N0_COLOR}" 1>&2
	fi

	. ${subrdir}/rcconf.subr
	# per-env postup func
	if fn_exists postup_${jname} 2>/dev/null; then
		${ECHO} "${N1_COLOR}execute postup_${jname}${N0_COLOR}"
		postup_${jname}
		${ECHO} "${N1_COLOR}execute postup_${jname} done${N0_COLOR}"
	fi

	# restore old workdir
	cbsd_workdir="${ocbsd_workdir}"
}

# testing/wip
run_bhyve_cloud()
{
	local CURL_CMD=$( which curl )
	[ -z "${CURL_CMD}" ] && err 1 "${N1_COLOR}cloud up requires curl, please install: ${N2_COLOR}pkg install -y curl${N0_COLOR}"
	${ECHO} "${N1_COLOR}run image via: ${N2_COLOR}${CLOUD_URL}${N0_COLOR}"
	[ -z "${ssh_wait}" ] && ssh_wait=0

	${CAT_CMD} > up-${jname}.json <<EOF
{
  "host_hostname": "${host_hostname}",
  "imgsize": "${imgsize}",
  "ram": "${vm_ram}",
  "cpus": "${vm_cpus}",
  "image": "${image}",
  "extras": "${extras}",
  "recomendation": "${recomendation}",
  "pubkey": "${CLOUD_KEY}"
}
EOF

	${CAT_CMD} > deploy-${jname}.sh <<EOF
${CURL_CMD} -X POST -H "Content-Type: application/json" -d @up-${jname}.json ${CLOUD_URL}/api/v1/create/${jname}
EOF
	${CHMOD_CMD} +x deploy-${jname}.sh
	./deploy-${jname}.sh
	# without debug
	${RM_CMD} -f ./deploy-${jname}.sh ./up-${jname}.json

	if [ ${ssh_wait} -eq 1 ]; then
		bhyve_ssh_wait
		ret=$?
	else
		ret=0
	fi
	if [ ${ret} -eq 0 ]; then
		#bhyve_${jname}		# re-read variables

		if fn_exists postcreate_${jname} 2>/dev/null; then
			${ECHO} "${N1_COLOR}  == execute postcreate function for: ${N2_COLOR}${jname}${N0_COLOR}" 1>&2

			# export some variables via H_CBSD_ (for scp,expose, and so on...)
			export H_CBSD_jname="${jname}"

			# cleanup jail when postcreate action failed

			trap "set +o xtrace; cd ${OBSD_PWD}; ${ECHO} \"${N1_COLOR}  == execute postcreate function for: ${N2_COLOR}${jname}: ${W1_COLOR}failed${N1_COLOR} : cleanup${N0_COLOR}\" 1>&2  ; bremove ${jname}" HUP INT ABRT BUS TERM EXIT
			set -o errexit
			set -o xtrace

			postcreate_${jname}

			set +o xtrace
			set +o errexit
			unset H_CBSD_jname
			trap "" HUP INT ABRT BUS TERM EXIT
			${ECHO} "${N1_COLOR}  == execute postcreate function for: ${N2_COLOR}${jname}: ${H3_COLOR}success${N0_COLOR}" 1>&2
		else
			${ECHO} "${N1_COLOR}  == postcreate function not specified: postcreate_${N2_COLOR}${jname}${N0_COLOR}" 1>&2
		fi

		jname="${ojname}"
		# per-env postup func
		if fn_exists postup_${jname} 2>/dev/null; then
			${ECHO} "${N1_COLOR}execute postup_${jname}${N0_COLOR}"
			postup_${jname}
			jname="${ojname}"		# for corrupted/changed jname in func
		fi
	else
		[ ${ssh_wait} -eq 1 ] && err 1 "${N1_COLOR}ssh failed${N0_COLOR}"
	fi
	return 0
}

run_bhyve()
{
	local MYOPTARG BHYVE_ARGS ojname _ret

	[ -z "${jname}" ] && err 1 "${N1_COLOR}run_bhyve: empty jname${N0_COLOR}"

	# allow all bhyve settings
	BHYVE_ARGS="relative_path jname path data rcconf host_hostname ip4_addr astart nic_hwaddr nic_ratelimit zfs_snapsrc runasap interface rctl_nice emulator \
	imgsize imgtype vm_cpus vm_ram vm_os_type vm_efi iso_site iso_img register_iso_name register_iso_as vm_hostbridge bhyve_flags virtio_type vm_os_profile \
	swapsize vm_iso_path vm_guestfs vm_vnc_port bhyve_generate_acpi bhyve_wire_memory bhyve_rts_keeps_utc bhyve_force_msi_irq bhyve_x2apic_mode \
	bhyve_mptable_gen bhyve_ignore_msr_acc cd_vnc_wait bhyve_vnc_resolution bhyve_vnc_tcp_bind bhyve_vnc_vgaconf nic_driver vnc_password media_auto_eject \
	vm_cpu_topology debug_engine xhci cd_boot_firmware jailed chrooted on_poweroff on_reboot on_crash is_cloud ci_jname ci_fqdn ci_template ci_interface \
	ci_ip4_addr ci_gw4 ci_nameserver_address ci_nameserver_searchci_adjust_inteface_helper ci_user_add ci_user_pw_user ci_user_pw_root ci_user_pubkey uuid \
	ci_interface_mtu ci_interface2 ci_interface_mtu2 ci_ip4_addr2 ci_gw42 nic_flags nic_flags2 bhyve_vnc_kbdlayout bhyverun_wrapper bhyve_cmd pid_wait flavor \
	tpm"

	if [ -n "${CLOUD_URL}" ]; then
		# unset all
		ojname="${jname}"

		for i in ${BHYVE_ARGS}; do
			unset ${i}
		done

		jname="${ojname}"
		bhyve_${jname}

		run_bhyve_cloud
		_ret=$?
		return ${_ret}
	fi

	. ${subrdir}/rcconf.subr
	[ $? -eq 0 ] && err 1 "${N1_COLOR}already exist: ${N2_COLOR}${jname}${N0_COLOR}"

	ojname="${jname}"
	# should be in sync with bcreate script (except: jname)
	MYOPTARG="jconf inter removejconf"
	MYOPTARG="${MYOPTARG} ${BHYVE_ARGS}"

	# push old cbsd workdir
	ocbsd_workdir="${workdir}"

	# unset all
	for i in ${MYOPTARG}; do
		unset ${i}
	done

	jname="${ojname}"

	# defaults
	readconf bhyve-freebsd-default.conf
	readconf cbsdfile.conf

	if fn_exists globals 2>/dev/null; then
		globals
	fi

	bhyve_${jname}

	BHYVE_ARGS=

	# construct non-empty args/params
	for i in ${MYOPTARG}; do
		eval _val="\$$i"
		[ -z "${_val}" ] && continue
		if [ -z "${BHYVE_ARGS}" ]; then
			BHYVE_ARGS="${i}=\"${_val}\""
		else
			BHYVE_ARGS="${BHYVE_ARGS} ${i}=\"${_val}\""
		fi
	done

	[ -z "${cbsd_workdir}" ] && cbsd_workdir="${ocbsd_workdir}"

	# per-env preup func
	if fn_exists preup_${jname} 2>/dev/null; then
		${ECHO} "${N1_COLOR}execute preup_${jname}${N0_COLOR}"
		preup_${jname}
		jname="${ojname}"		# for corrupted/changed jname in func
		${ECHO} "${N1_COLOR}execute preup_${jname} done${N0_COLOR}"
	fi

	if [ -d ${myworkdir}/jails-system ]; then
		BHYVE_ARGS="${BHYVE_ARGS} jailsysskeldir=${myworkdir}/jails-system"
	fi

	# dynamic extra data?
	for i in ${ci_user_add}; do
		for _test in ci_user_pw_${i} ci_user_pw_${i}_crypt ci_user_gecos_${i} ci_user_home_${i} ci_user_shell_${i} ci_user_member_groups_${i} ci_user_pubkey_${i}; do
			eval T="\$$_test"
			[ -n "${T}" ] && BHYVE_ARGS="${BHYVE_ARGS} ${_test}=\"${T}\""
		done
	done

	${ECHO} "${N1_COLOR}invoking command: ${N2_COLOR} ${ENV_CMD} cbsd_workdir="${cbsd_workdir}" bcreate ${N1_COLOR}${BHYVE_ARGS} ${CBSDFILE_ARGS}${N0_COLOR}" | ${TR_CMD} -d \\t

	set -o errexit
	${ENV_CMD} cbsd_workdir="${cbsd_workdir}" bcreate ${BHYVE_ARGS} ${CBSDFILE_ARGS}
	set +o errexit

	# runasap not atomic with bcreate to ignore bhyve_ssh_wait_timeout when/if fetch_iso work
	[ ${runasap} -eq 1 ] && ${ENV_CMD} cbsd_workdir="${cbsd_workdir}" bstart jname=${jname} quiet=1

	# restore old workdir
	cbsd_workdir="${ocbsd_workdir}"

	# don't wait ssh by default
	[ -z "${ssh_wait}" ] && ssh_wait=0

	if [ ${ssh_wait} -eq 1 ]; then
		bhyve_ssh_wait
		ret=$?
	else
		ret=0
	fi

	if [ ${ret} -eq 0 ]; then
		#bhyve_${jname}		# re-read variables

		if fn_exists postcreate_${jname} 2>/dev/null; then
			${ECHO} "${N1_COLOR}  == execute postcreate function for: ${N2_COLOR}${jname}${N0_COLOR}" 1>&2

			# export some variables via H_CBSD_ (for scp,expose, and so on...)
			export H_CBSD_jname="${jname}"

			# cleanup bhyve when postcreate action failed
			trap "set +o xtrace; cd ${OBSD_PWD}; ${ECHO} \"${N1_COLOR}  == execute postcreate function for: ${N2_COLOR}${jname}: ${W1_COLOR}failed${N1_COLOR} : cleanup${N0_COLOR}\" 1>&2  ; bremove ${jname}" HUP INT ABRT BUS TERM EXIT

			set -o errexit
			set -o xtrace

			# change dir if necessary for internal command
			#export CBSD_PWD="${myworkdir}"
			postcreate_${jname}

			set +o xtrace
			set +o errexit
			trap "" HUP INT ABRT BUS TERM EXIT
			unset H_CBSD_jname
			${ECHO} "${N1_COLOR}  == execute postcreate function for: ${N2_COLOR}${jname}: ${H3_COLOR}success${N0_COLOR}" 1>&2
		else
			${ECHO} "${N1_COLOR}  == postcreate function not specified: postcreate_${N2_COLOR}${jname}${N0_COLOR}" 1>&2
		fi

		jname="${ojname}"
		# per-env postup func
		if fn_exists postup_${jname} 2>/dev/null; then
			${ECHO} "${N1_COLOR}execute postup_${jname}${N0_COLOR}"
			postup_${jname}
			jname="${ojname}"		# for corrupted/changed jname in func
		fi
	else
		[ ${ssh_wait} -eq 1 ] && err 1 "${N1_COLOR}ssh failed${N0_COLOR}"
	fi

	return 0
}
